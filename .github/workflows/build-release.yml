name: Build and Release

# Se ejecuta cuando creas un nuevo tag v*.*.*
on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-mac:
    name: Build macOS
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Update version from tag
      run: |
        python build_scripts/update_version.py
        echo "Updated to version:"
        grep "__version__" version.py

    - name: Create credentials.json from secret
      run: |
        echo '${{ secrets.GOOGLE_CREDENTIALS }}' > credentials.json

    - name: Install create-dmg
      run: |
        brew install create-dmg

    - name: Build macOS app
      run: |
        python build_scripts/build_mac.py --dmg --clean

    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: dist/TicketeraBuena-*.dmg

  build-windows:
    name: Build Windows
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Update version from tag
      run: |
        python build_scripts/update_version.py
        echo "Updated to version:"
        grep "__version__" version.py

    - name: Install NSIS
      run: |
        choco install nsis -y
        # Add NSIS to PATH for current session
        $env:PATH = "$env:PATH;C:\Program Files (x86)\NSIS"
        echo "C:\Program Files (x86)\NSIS" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: powershell

    - name: Download ChromeDriver for Windows
      run: |
        $chromeVersion = (Get-Item "C:\Program Files\Google\Chrome\Application\chrome.exe").VersionInfo.ProductVersion
        $majorVersion = $chromeVersion.Split('.')[0]
        echo "Chrome version: $chromeVersion (major: $majorVersion)"

        # Download ChromeDriver
        $url = "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_$majorVersion"
        $driverVersion = Invoke-RestMethod -Uri $url
        echo "ChromeDriver version: $driverVersion"

        $downloadUrl = "https://storage.googleapis.com/chrome-for-testing-public/$driverVersion/win64/chromedriver-win64.zip"
        echo "Downloading from: $downloadUrl"

        Invoke-WebRequest -Uri $downloadUrl -OutFile chromedriver.zip
        Expand-Archive -Path chromedriver.zip -DestinationPath .
        Move-Item -Path chromedriver-win64\chromedriver.exe -Destination . -Force
        Remove-Item -Path chromedriver.zip
        Remove-Item -Path chromedriver-win64 -Recurse

        echo "ChromeDriver downloaded successfully"
        dir chromedriver.exe
      shell: powershell

    - name: Create credentials.json from secret
      run: |
        echo '${{ secrets.GOOGLE_CREDENTIALS }}' | Out-File -FilePath credentials.json -Encoding utf8
      shell: powershell

    - name: Build Windows app
      run: |
        python build_scripts/build_windows.py --clean --installer
      env:
        PYTHONIOENCODING: utf-8

    - name: List build output (debugging)
      if: always()
      run: |
        echo "=== Listing dist directory ==="
        dir dist
      shell: powershell

    - name: Upload Windows artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: dist/TicketeraBuena-Setup-*.exe
        if-no-files-found: warn

  create-release:
    name: Create Release
    needs: [build-mac, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download macOS artifacts
      continue-on-error: true
      uses: actions/download-artifact@v4
      with:
        name: macos-build
        path: macos-artifacts/

    - name: Download Windows artifacts
      continue-on-error: true
      uses: actions/download-artifact@v4
      with:
        name: windows-build
        path: windows-artifacts/

    - name: List downloaded files
      run: |
        echo "=== macOS artifacts ==="
        ls -lR macos-artifacts/
        echo "=== Windows artifacts ==="
        ls -lR windows-artifacts/
        echo "=== Find all files ==="
        find macos-artifacts/ -name "*.dmg"
        find windows-artifacts/ -name "*.exe"

    - name: Prepare release files
      run: |
        mkdir -p release-files
        # Copy only .dmg for macOS
        find macos-artifacts/ -name "*.dmg" -exec cp {} release-files/ \; 2>/dev/null || true
        # Copy only Setup installer for Windows
        find windows-artifacts/ -name "TicketeraBuena-Setup-*.exe" -exec cp {} release-files/ \; 2>/dev/null || true
        echo "=== Release files prepared ==="
        ls -lh release-files/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-files/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
